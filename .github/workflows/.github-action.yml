on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ vars.DOCKER_PASSWORD }}
  IMAGE_NAME: golang-devops
  CONTAINER_NAME: golang-devops

permissions:
  contents: read

jobs:
      
  build:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3

    - name: pre
      run: |
        echo "COMMIT_SHA_SHORT=`echo ${GITHUB_SHA} | cut -c1-7`"
    
    - name: build docker image
      run: |
        echo $DOCKER_USERNAME $COMMIT_SHA_SHORT
        docker build -t $DOCKER_USERNAME/$IMAGE_NAME:$COMMIT_SHA_SHORT .

  push-image:
    runs-on: self-hosted
    needs: build
    steps:
    - name: pre
      run: |
        echo "COMMIT_SHA_SHORT=`echo ${GITHUB_SHA} | cut -c1-7`"
        
    - name: push docker image
      run: |
        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        docker push $$DOCKER_USERNAME/$IMAGE_NAME:$COMMIT_SHA_SHORT
        

  deploy:
    permissions:
      contents: none
    runs-on: self-hosted
    needs: push-image

    steps:
    - name: pre
      run: |
        echo "COMMIT_SHA_SHORT=`echo ${GITHUB_SHA} | cut -c1-7`"
        
    - name: run docker image
      run: |
        containerId=$(docker ps -qa --filter "name=^$CONTAINER_NAME\$")
        if [ -n "$containerId" ]; then
        echo "Stop and remove existing container..."
        docker stop $CONTAINER_NAME | xargs docker rm
        fi

        docker rmi $DOCKER_USERNAME/$IMAGE_NAME:$COMMIT_SHA_SHORT || true
        docker pull $DOCKER_USERNAME/$IMAGE_NAME:$COMMIT_SHA_SHORT
 
        echo "Start new container..."
        docker run -d --name $CONTAINER_NAME -p 8080:8080
